{"componentChunkName":"component---src-templates-blog-post-js","path":"/radcastをDockerで動くようにした/","result":{"data":{"site":{"siteMetadata":{"title":"eginoy Blog"}},"markdownRemark":{"id":"2ee1b5a8-80a0-5997-b720-b81c9b12a11d","excerpt":"作ったもの https://github.com/eginoy/radcast-docker 動機 radikoのタイムフリーは再生開始から24時間という、聴取期限が切られている。 自分は家事を始めるタイミングでタイムフリーを聴くことが多い。 聴くものは深夜ラジオがほとんどなので（長さが1、…","html":"<h3>作ったもの</h3>\n<p><a href=\"https://github.com/eginoy/radcast-docker\">https://github.com/eginoy/radcast-docker</a></p>\n<h3>動機</h3>\n<p>radikoのタイムフリーは再生開始から24時間という、聴取期限が切られている。<br>\n自分は家事を始めるタイミングでタイムフリーを聴くことが多い。<br>\n聴くものは深夜ラジオがほとんどなので（長さが1、2時間）、ラジオを聴き終える前に家事が先に終了してしまう。<br>\n次に家事を始めるタイミングであらためて続きを聴き始める、といったことをしたいのだが、冒頭に書いた聴取期限があるので日をまたいで聴くことができない。<br>\nそこで、<a href=\"https://github.com/omiso46/radcast\">radcast</a>というradikoを録音するOSSを見つけたのでこちらを利用することにした。  </p>\n<h4>なぜDockerを利用したか</h4>\n<p>以前から興味があり、はてブのホッテントリに上がってくるDocker,Docker Composeの入門記事をハンズオン形式で進めていた。<br>\nしかし、業務でDockerを扱う機会がないので、チュートリアルを終えた後にすることがなく困っていた。<br>\n今回の環境構築は良い機会だと考え、Docker上でradcastを動かすことにした。</p>\n<h3>Dockerファイルを書いてみて学べた、つまずいた箇所</h3>\n<h4>alpineイメージでタイムゾーンがJSTにならない</h4>\n<p>radcastはcronで録音スケジュール管理をしているので、コンテナ内のタイムゾーンをJSTにしておきたかった。<br>\nDockerファイル、Docker Composeファイルでタイムゾーン環境変数を指定するだけではJSTにならなかった。（<code class=\"language-text\">date</code>コマンドで確認）<br>\nこちらは既知の問題だったため、すぐに解決できた。※<a href=\"https://www.collelog.jp/technical-howto/alpine-linux-timezone-setting\">参考</a>  </p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token keyword\">FROM</span> golang<span class=\"token punctuation\">:</span>alpine\n<span class=\"token keyword\">RUN</span> mkdir /home/radcast\n<span class=\"token keyword\">WORKDIR</span> /home/radcast\n\n<span class=\"token keyword\">RUN</span> apk update  &amp;&amp; apk add ffmpeg git tzdata &amp;&amp;\\\ncp /usr/share/zoneinfo/Asia/Tokyo /etc/localtime &amp;&amp; apk del tzdata &amp;&amp; \\\ngo get github.com/omiso46/radcast &amp;&amp; \\\nmkdir recorded  \n\n<span class=\"token keyword\">CMD</span> chmod +x config<span class=\"token punctuation\">-</span>create.sh &amp;&amp; ./config<span class=\"token punctuation\">-</span>create.sh &amp;&amp; \\\nradcast <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>config ./config.json <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>host 0.0.0.0 <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>output ./recorded <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>port 3355\n<span class=\"token keyword\">EXPOSE</span> 3355</code></pre></div>\n<h4>alpineのデフォルトシェルはash</h4>\n<p>radcastの録音スケジュールファイルが存在しない場合に、設定ファイルを自動生成するシェルスクリプトを書いた。<br>\nこのシェルスクリプトの先頭行（shebangと呼ぶらしい）に<code class=\"language-text\">#!/bin/bash</code>と書いてしまった。  </p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/ash</span>\n<span class=\"token comment\">#↑ここを /bin/bashにしてしまった。</span>\n<span class=\"token assign-left variable\">FILE</span><span class=\"token operator\">=</span><span class=\"token string\">\"config.json\"</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token operator\">!</span> -e <span class=\"token variable\">$FILE</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    radcast --setup <span class=\"token operator\">></span> config.json\n    <span class=\"token function\">chmod</span> <span class=\"token number\">777</span> config.json\n<span class=\"token keyword\">fi</span></code></pre></div>\n<p>処理部分の構文に問題があると勘違いしてしまい、解決に時間がかかった。<br>\nalpineのデフォルトシェルがashだということは知らなかったので、この問題に当たったことで学べたのは良かった。</p>\n<h3>Docker Composeファイルを書いてみて学べた箇所</h3>\n<h4>コンテナの自動起動はDocker Composeが面倒を見てくれる</h4>\n<p>radcastの利用目的を考えると、システム起動時に自動起動して欲しい。<br>\ndocker-composeファイルに<code class=\"language-text\">restart</code>を指定するとコンテナを自動起動してくれる。\nコンテナの停止と起動（再起動）をコマンド一発で行えないかと検索していたら、たまたま見つけることができた。※<a href=\"https://junchang1031.hatenablog.com/entry/2016/05/18/000605\">参考</a><br>\nちなみにコンテナの再起動は<code class=\"language-text\">$ docker-compose restart</code></p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"3.2\"</span>\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span> \n    <span class=\"token key atrule\">radcast</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span> .\n        <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span> \n          <span class=\"token punctuation\">-</span> ./<span class=\"token punctuation\">:</span>/home/radcast\n        <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span> \n          <span class=\"token punctuation\">-</span> <span class=\"token string\">\"3355:3355\"</span>\n        <span class=\"token key atrule\">tty</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n        <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> unless<span class=\"token punctuation\">-</span>stopped</code></pre></div>\n<h3>所感</h3>\n<p>Docker,Docker Composeはチュートリアルをこなすばかりで、自身の課題を解決するために各設定ファイルを1から書いたのは今回がはじめてだった。<br>\n現在運用しているRaspberryPi4が故障しても、Dockerが利用できる環境へGitHubからリポジトリを落としてくるだけで環境を構築できるのは非常に良いと思った。<br>\nコマンド一発で環境構築できるのは気持ちが良いし、楽しい。</p>","frontmatter":{"title":"radcastをDockerで動くようにした","date":"May 02, 2021","description":null}},"previous":{"fields":{"slug":"/tailscaleを利用して外出先でも広告ブロック/"},"frontmatter":{"title":"tailscaleを利用して外出先でも広告ブロック"}},"next":null},"pageContext":{"id":"2ee1b5a8-80a0-5997-b720-b81c9b12a11d","previousPostId":"a523c5a1-6635-5e5b-ab23-1dda876b2af6","nextPostId":null}},"staticQueryHashes":["2841359383","3257411868"]}