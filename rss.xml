<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[eginoy Blog]]></title><description><![CDATA[日々の出来事やプログラミングについて書きます。]]></description><link>https://eginoy.github.io/blog</link><generator>GatsbyJS</generator><lastBuildDate>Wed, 21 Apr 2021 13:54:04 GMT</lastBuildDate><item><title><![CDATA[大学生になった]]></title><description><![CDATA[…]]></description><link>https://eginoy.github.io/blog/大学生になった/</link><guid isPermaLink="false">https://eginoy.github.io/blog/大学生になった/</guid><pubDate>Sat, 03 Apr 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;今年度から東京通信大学の情報マネジメント学部に入学した。  &lt;/p&gt;
&lt;h3&gt;なぜ大学に入ったのか&lt;/h3&gt;
&lt;p&gt;最終学歴が高卒なので、学歴コンプレックスを解消しておきたかった。&lt;br&gt;
理由としてはこれがすべてで、とくに高尚な理由はない。  &lt;/p&gt;
&lt;h3&gt;なぜ東京通信大学&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;学費が安いこと&lt;/li&gt;
&lt;li&gt;通学しなくて良いこと&lt;/li&gt;
&lt;li&gt;情報系の学部があること&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以上の3点が外せない条件だった。&lt;br&gt;
色々調べたところ、学費が安いという条件の時点で東京通信大学一択になってしまったが、他の条件も満たしていたのでここに決めた。&lt;br&gt;
授業開始から3週間弱経過したが、小テストは配布資料を見てもいいので、授業は流し見でも満点が取れる。&lt;br&gt;
力の抜き加減がわからないので、早く単位認定試験を受けてみたい。&lt;br&gt;
（単位認定試験を受けてみるまでは危機感が生まれないので力が入らない）&lt;/p&gt;
&lt;p class=&apos;diamond&apos;&gt;&amp;#9830;&lt;/p&gt;
&lt;p&gt;せっかく憧れ（!）の大学生になったので、利用している定額課金サービスで学割が使えるものを調べた。  &lt;/p&gt;
&lt;h3&gt;Amazon Prime&lt;/h3&gt;
&lt;p&gt;年間4900円→年間2450円になり、さらに紙の書籍を購入すると10%ポイント還元されるようになった。
技術書などは紙で買うことが多いのでこの特典は嬉しい。&lt;/p&gt;
&lt;h3&gt;Amazon Music UnlimitedからApple Musicへ&lt;/h3&gt;
&lt;p&gt;プライム会員価格780円（一年契約で月額650円）→月額480円になる。&lt;br&gt;
他の音楽配信サブスクの学生プランがどうなっているのかが気になり調べたところ、どれも月額480円だった。&lt;br&gt;
通常プランの価格では、Amazon Music Unlimitedがプライム会員の場合に780円と一番安かったので契約していたが、学生プランではどれも横並びのためApple Musicを契約することにした。&lt;br&gt;
（Amazon Music Unlimitedは、アーティストでの全曲シャッフル再生ができなかったり、ステーション機能が正常に使用できたことがないなど、安いからと目をつぶっていた部分が多かった。）&lt;/p&gt;
&lt;h3&gt;楽天&lt;/h3&gt;
&lt;p&gt;そもそも学生でなくても15~25歳まで対象なので、Rakuten学割の対象ではあったが、楽天ネットスーパー、楽天モバイル、楽天ひかり（光回線）くらいしか利用していないため、恩恵を受けることはない。&lt;br&gt;
一応登録しておいたが、&lt;strong&gt;楽天学割メルマガ購読&lt;/strong&gt;が必須条件だったので笑った。&lt;/p&gt;
&lt;p class=&apos;diamond&apos;&gt;&amp;#9830;&lt;/p&gt;
&lt;h3&gt;Apple Pencil（第1世代）を学割で購入&lt;/h3&gt;
&lt;p&gt;2年半ほど前に行われたPayPay20%還元祭りの際に購入したiPadを所持していたので、学生になったことだしApple Pencilを購入。&lt;br&gt;
想像以上に書き心地が良いので、購入してよかった。&lt;br&gt;
Apple公式ストアの学割+楽天Rebates（楽天の学割について調べているときに発見した）を利用して購入した。&lt;br&gt;
メモ書き用に溜めていた裏紙を処分できたので机の上がすっきりした。  &lt;/p&gt;
&lt;h4&gt;所感&lt;/h4&gt;
&lt;p&gt;ブログをはじめて今回で4投稿目だが、書き上げるのにとても時間がかかっている。&lt;br&gt;
（この投稿は書き始めてから、3週間弱放置していた。）&lt;br&gt;
別に仕事でやっているわけではないのでいいのだけれど、もう少し思い通りにすらすら書きたいとは思う。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[初めてnpmパッケージを作って公開した]]></title><description><![CDATA[作ったもの gatsbyの新規記事テンプレートを生成するcliツール 目標 でインストールし、 のように利用できるようにする。   インストールするだけでcliから利用可能にしたい 前回の記事ではのにコマンド名とスクリプトのパスを設定することでcli…]]></description><link>https://eginoy.github.io/blog/初めてnpmパッケージを公開した/</link><guid isPermaLink="false">https://eginoy.github.io/blog/初めてnpmパッケージを公開した/</guid><pubDate>Wed, 31 Mar 2021 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;作ったもの&lt;/h2&gt;
&lt;p&gt;gatsbyの新規記事テンプレートを生成する&lt;a href=&quot;https://github.com/eginoy/gatsby_new_post_script&quot;&gt;cliツール&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;目標&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;$ yarn add --dev gatsby-new-post-generator&lt;/code&gt;でインストールし、&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;$ yarn newpost ${blogTitle}&lt;/code&gt;のように利用できるようにする。  &lt;/p&gt;
&lt;h2&gt;インストールするだけでcliから利用可能にしたい&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://eginoy.github.io/%E6%96%B0%E8%A6%8F%E8%A8%98%E4%BA%8B%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%82%92%E6%9B%B8%E3%81%84%E3%81%9F/&quot;&gt;前回の記事&lt;/a&gt;では&lt;code class=&quot;language-text&quot;&gt;package.json&lt;/code&gt;の&lt;code class=&quot;language-text&quot;&gt;script&lt;/code&gt;にコマンド名とスクリプトのパスを設定することでcliから利用することができた。&lt;br&gt;
今回はnpmパッケージとして扱いたいので、package.jsonを作成する。&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;$ npm init&lt;/code&gt;&lt;br&gt;
パッケージ名やその他諸々の情報を含んだpackage.jsonが生成される。  &lt;/p&gt;
&lt;p&gt;npmリポジトリからインストール後、追加設定(package.jsonのscriptへ追記)を行うことなくcliから利用できるようにしたい。&lt;br&gt;
そのため、以下のようにpackage.jsonを変更した。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;gatsby-new-post-generator&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;1.0.0&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Generate gatsby new post(.md) cli script&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;main&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;./lib/newpost.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;bin&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;newpost&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;bin/index.js&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;repository&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;git&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;git+ssh://git@github.com/eginoy/gatsby-new-post-generator.git&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;author&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;eginoy&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;license&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;MIT&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;bugs&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;https://github.com/eginoy/gatsby-new-post-generator/issues&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;homepage&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;https://github.com/eginoy/gatsby-new-post-generator&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;keywords&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;gatsby-new-post&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;directories&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;lib&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;lib&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;main&lt;/code&gt;と&lt;code class=&quot;language-text&quot;&gt;bin&lt;/code&gt;の設定がポイントで、&lt;code class=&quot;language-text&quot;&gt;bin&lt;/code&gt;に設定した&lt;code class=&quot;language-text&quot;&gt;newpost&lt;/code&gt;がcliから呼び出す際のスクリプト名称になっている。&lt;br&gt;
処理は&lt;code class=&quot;language-text&quot;&gt;main&lt;/code&gt;で指定している&lt;code class=&quot;language-text&quot;&gt;./lib/newpost.js&lt;/code&gt;に記述している。  &lt;/p&gt;
&lt;h3&gt;ローカルで動作確認&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;yarn add&lt;/code&gt;コマンドの引数にファイルパスを渡すと、ローカルのパッケージを追加することが可能。&lt;br&gt;
そのため、npmjsリポジトリへ公開する前にローカルで動作確認を行うことができる。&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;$ cd ${gatsby_blog_directory}&lt;/code&gt;&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;$ yarn add --dev ../gatsby-new-post-generator&lt;/code&gt;  &lt;/p&gt;
&lt;h3&gt;動作確認&lt;/h3&gt;
&lt;p&gt;newpostでの記事生成前&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;$ tree content/blog/
content/blog/
├── Gatsbyでブログを作った
│   └── index.md
├── Ubuntu20.04でVisualStudioCodeがクラッシュする
│   └── index.md
├── 初めてnpmパッケージを公開した
│   └── index.md
└── 新規記事を作成するスクリプトを書いた
    └── index.md&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以下のコマンドで新しい投稿を生成&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;$ yarn newpost HelloWorld!&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;$ tree content/blog/
content/blog/
├── Gatsbyでブログを作った
│   └── index.md
├── HelloWorld! //newpostコマンドで生成
│   └── index.md
├── Ubuntu20.04でVisualStudioCodeがクラッシュする
│   └── index.md
├── 初めてnpmパッケージを公開した
│   └── index.md
└── 新規記事を作成するスクリプトを書いた
    └── index.md&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;公開手順&lt;/h2&gt;
&lt;h3&gt;npmjsのアカウントを作成する&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/signup&quot;&gt;ここ&lt;/a&gt;からサインアップする&lt;br&gt;
自分はnpmjs用のメールアドレスを新しく作成した。(スパムメール対策)  &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;$ npm login&lt;/code&gt;でログインする&lt;/p&gt;
&lt;h3&gt;公開する&lt;/h3&gt;
&lt;p&gt;公開したいパッケージのディレクトリへ移動する&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;$ cd ${npm_package_dir}&lt;/code&gt;&lt;br&gt;
npmリポジトリへ公開&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;$ npm publish&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;学べたこと&lt;/h2&gt;
&lt;p&gt;npmとyarnはパッケージをインストールしたときの挙動が微妙に違うことがわかった。&lt;br&gt;
今回のようにcli-toolとして利用したいとき、&lt;br&gt;
yarnを利用すると、&lt;code class=&quot;language-text&quot;&gt;--dev&lt;/code&gt;オプションを利用した場合でも&lt;code class=&quot;language-text&quot;&gt;yarn newpost&lt;/code&gt;のように利用できた。(開発関係依存として追加したプロジェクト内でスコープを限定できる)&lt;br&gt;
しかし、npmの&lt;code class=&quot;language-text&quot;&gt;--save-dev&lt;/code&gt;オプションで開発依存関係としてパッケージをインストールすると&lt;code class=&quot;language-text&quot;&gt;npm run newpost&lt;/code&gt;、&lt;code class=&quot;language-text&quot;&gt;npm newpost&lt;/code&gt;のように利用することができなかった。&lt;br&gt;
(グローバルインストール(&lt;code class=&quot;language-text&quot;&gt;-g&lt;/code&gt;オプション)すれば、bash aliasのように&lt;code class=&quot;language-text&quot;&gt;newpost&lt;/code&gt;で使用できるが、gatsbyの記事生成で利用するだけなので適当でない)&lt;/p&gt;
&lt;h2&gt;所感&lt;/h2&gt;
&lt;p&gt;npmパッケージはインストールして利用するだけで、作成するのは今回が初めてだった。&lt;br&gt;
そもそもこのような形でまとめるのも初めてで、とても大変だった。&lt;br&gt;
しかし、やってみると今まで曖昧にしてきた部分を調べ直したりしたので、良い学習になった。
また、意外と手軽にnpmパッケージを作ることができることがわかり、良い経験になった。&lt;/p&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://nodachisoft.com/common/jp/article/jp000110/&quot;&gt;https://nodachisoft.com/common/jp/article/jp000110/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.npmjs.org/post/118810260230/building-a-simple-command-line-tool-with-npm&quot;&gt;https://blog.npmjs.org/post/118810260230/building-a-simple-command-line-tool-with-npm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://qiita.com/suzuki_sh/items/f3349efbfe1bdfc0c634&quot;&gt;https://qiita.com/suzuki_sh/items/f3349efbfe1bdfc0c634&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/jspoint/creating-cli-executable-global-npm-module-5ef734febe32&quot;&gt;https://medium.com/jspoint/creating-cli-executable-global-npm-module-5ef734febe32&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://note.kiriukun.com/entry/20190417-path-resolve&quot;&gt;https://note.kiriukun.com/entry/20190417-path-resolve&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[新規記事を作成するスクリプトを書いた]]></title><description><![CDATA[つくったもの https://github.com/eginoy/gatsby-new-post-generator インストール gatsbyで作成したwebsiteディレクトリに移動し、script格納ディレクトリを作成して移動    リポジトリ全体は必要無いのでsvn…]]></description><link>https://eginoy.github.io/blog/新規記事を作成するスクリプトを書いた/</link><guid isPermaLink="false">https://eginoy.github.io/blog/新規記事を作成するスクリプトを書いた/</guid><pubDate>Mon, 22 Mar 2021 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;つくったもの&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/eginoy/gatsby-new-post-generator&quot;&gt;https://github.com/eginoy/gatsby-new-post-generator&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;インストール&lt;/h2&gt;
&lt;p&gt;gatsbyで作成したwebsiteディレクトリに移動し、script格納ディレクトリを作成して移動&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;$ cd ${your_gatsby_website_dir} &amp;amp;&amp;amp; mkdir script &amp;amp;&amp;amp; cd script&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;リポジトリ全体は必要無いのでsvnコマンドでscriptを落としてくる&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;$ svn export https://github.com/eginoy/gatsby-new-post-generator/trunk/lib/&lt;/code&gt;&lt;br&gt;
&lt;del&gt;（TODO: せっかくなのでnpmパッケージとして使えるようにする。）&lt;/del&gt;&lt;br&gt;
&lt;a href=&quot;https://eginoy.github.io/%E5%88%9D%E3%82%81%E3%81%A6npm%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E3%82%92%E5%85%AC%E9%96%8B%E3%81%97%E3%81%9F/&quot;&gt;npmパッケージにした。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;package.jsonのscriptsにnewpostコマンドを追加する&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;&amp;quot;scripts&amp;quot;: { &amp;quot;newpost&amp;quot;: &amp;quot;node ./script/lib/newpost.js&amp;quot;, &amp;quot;build&amp;quot;: &amp;quot;gatsby build&amp;quot;, ...&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;使い方&lt;/h2&gt;
&lt;p&gt;hello_worldというタイトルの記事を作成する。&lt;br&gt;
（Markdownのメタデータへ指定したタイトル,本日日付をセットした雛形を生成）  &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;$ yarn newpost hello_world&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;なぜつくったか&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;以前少し触ったGo製の静的サイトジェネレーター(hugo)には新しいページを作成するコマンドがあったがGatsbyにはなかったので。  &lt;/li&gt;
&lt;li&gt;毎回手動で記事を作成するのが面倒。  &lt;/li&gt;
&lt;li&gt;cliツールを作成してみたいと思っていたところに、良い感じの課題が生えてきたので。  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;所感&lt;/h2&gt;
&lt;p&gt;cliツールを作るのは初めてだったが、面倒な作業を自動化できて楽しかった。&lt;br&gt;
（この記事はスクリプトから生成した雛形から作成した。）&lt;br&gt;
npmにパッケージを公開した経験も無いので、svnコマンドを使用したインストールになっている箇所を、npmでインストールできるようにしたい。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Ubuntu20.04でVisual Studio Codeがクラッシュする]]></title><description><![CDATA[経緯 WSL2上のUbuntu20.04を使用して開発していたが、ローカルで立てた開発サーバー(localhost)にアクセスできないといった現象が定期的に発生していた。 根本的な解決ができず、ストレスが貯まるのでDualBootでUbuntu20.0…]]></description><link>https://eginoy.github.io/blog/Ubuntu20.04でVisualStudioCodeがクラッシュする/</link><guid isPermaLink="false">https://eginoy.github.io/blog/Ubuntu20.04でVisualStudioCodeがクラッシュする/</guid><pubDate>Sun, 21 Mar 2021 00:00:00 GMT</pubDate><content:encoded>&lt;h3&gt;経緯&lt;/h3&gt;
&lt;p&gt;WSL2上のUbuntu20.04を使用して開発していたが、ローカルで立てた開発サーバー(localhost)にアクセスできないといった現象が定期的に発生していた。&lt;br&gt;
根本的な解決ができず、ストレスが貯まるのでDualBootでUbuntu20.04をインストールし、開発環境構築のためVisual Studio Code(以下vscode)を公式からインストールしたところ､起動後にクラッシュしてしまう現象に遭遇し､3時間ほど溶かしてしまったのでワークアラウンドをメモ｡  &lt;/p&gt;
&lt;h3&gt;環境&lt;/h3&gt;
&lt;p&gt;DISTRIB&lt;em&gt;ID=Ubuntu&lt;br&gt;
DISTRIB&lt;/em&gt;RELEASE=20.04&lt;br&gt;
DISTRIB&lt;em&gt;CODENAME=focal&lt;br&gt;
DISTRIB&lt;/em&gt;DESCRIPTION=“Ubuntu 20.04.2 LTS”&lt;br&gt;
Visual Studio Code version = 1.54.3&lt;/p&gt;
&lt;h3&gt;解決手順&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;sudo snap remove code&lt;/code&gt;&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;sudo apt purge code&lt;/code&gt;&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;rm ~/.local/share/keyrings -fr&lt;/code&gt;  &lt;/p&gt;
&lt;h4&gt;再度vscodeをインストールする｡&lt;/h4&gt;
&lt;p&gt;snapからインストールすると日本語入力ができないので､公式からダウンロードしてきてインストールする｡&lt;br&gt;
&lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;公式&lt;/a&gt;から&lt;code class=&quot;language-text&quot;&gt;.deb&lt;/code&gt;ファイルをインストールしてくる｡&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;sudo apt install ./code_1.54.3-1615806378_amd64.deb&lt;/code&gt; //ファイル名は適宜読み替えること  &lt;/p&gt;
&lt;h3&gt;解決方法の補足&lt;/h3&gt;
&lt;p&gt;参考リンクへ貼ったIssueに再現手順が書かれているが､自身の環境では以下の流れで今回の問題が発生した｡&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;snapでvscodeをインストール  &lt;/li&gt;
&lt;li&gt;GitHubアカウントでログインし設定を同期  &lt;/li&gt;
&lt;li&gt;snap経由でインストールしたvscodeでは日本語入力をできないことがわかりアンインストールする  &lt;/li&gt;
&lt;li&gt;公式の&lt;code class=&quot;language-text&quot;&gt;.deb&lt;/code&gt;を使用して再度vscodeをインストール &lt;/li&gt;
&lt;li&gt;vscodeが起動後にすぐクラッシュしてしまう  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;gnome keyringが持っているGitHubの認証情報がおかしなことになる（異なるバージョンのvscodeが読み書きすることで破壊している？）ことでクラッシュしているようなので､以下のコマンドでkeyringsをクリアすることで解決したと思っている｡&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;rm ~/.local/share/keyrings -fr&lt;/code&gt;  &lt;/p&gt;
&lt;h3&gt;参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/microsoft/vscode/issues/116690#issuecomment-791064392&quot;&gt;https://github.com/microsoft/vscode/issues/116690#issuecomment-791064392&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://askubuntu.com/questions/78344/how-to-completely-reset-erase-the-keyring&quot;&gt;https://askubuntu.com/questions/78344/how-to-completely-reset-erase-the-keyring&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Gatsbyでブログを作った]]></title><description><![CDATA[なぜGatsby ブログサービスを使用するのに比べ、良い学習になると思った 必然的にWeb周りの知識が必要になり、楽しみながら学習できる良い機会だと考えたので、ブログサービスを使用するのではなく、静的サイトジェネレーターでのブログ作成を選択した。   React.js…]]></description><link>https://eginoy.github.io/blog/Gatsbyでブログを作った/</link><guid isPermaLink="false">https://eginoy.github.io/blog/Gatsbyでブログを作った/</guid><pubDate>Fri, 19 Mar 2021 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;なぜGatsby&lt;/h2&gt;
&lt;h3&gt;ブログサービスを使用するのに比べ、良い学習になると思った&lt;/h3&gt;
&lt;p&gt;必然的にWeb周りの知識が必要になり、楽しみながら学習できる良い機会だと考えたので、ブログサービスを使用するのではなく、静的サイトジェネレーターでのブログ作成を選択した。  &lt;/p&gt;
&lt;h3&gt;React.js + TypeScript + GraphQL（よくわからない）の組み合わせが気に入った&lt;/h3&gt;
&lt;p&gt;仲間内で使うWebアプリをReact.js + TypeScript + Firebaseの組み合わせで開発しており、この組み合わせに近かったのでGatsbyを選択した。&lt;br&gt;
GraphQLについては名前を聞いたことがある程度なので、これを機に調べてみようと思う。  &lt;/p&gt;
&lt;h3&gt;モダンなフロントエンドライブラリに触れる機会を増やしたい&lt;/h3&gt;
&lt;p&gt;現職では、業務系WebアプリをASP.NET + Knockout.jsの組み合わせで開発している。&lt;br&gt;
ゆくゆくは帰郷したいので、そのためには転職する必要がある。&lt;br&gt;
（COVID-19の影響でリモートワークになって1年経つが、元々客先常駐の受託開発なので関東圏外での就業不可）&lt;br&gt;
いわゆるWeb系の求人を眺めていると、フロントエンドライブラリはReact.js、Vue.jsどちらか扱える必要があると感じたので。&lt;br&gt;
（サーバーサイドはRailsも触らなければ）&lt;/p&gt;
&lt;h3&gt;参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://takumon.com/2018/09/10/&quot;&gt;https://takumon.com/2018/09/10/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item></channel></rss>